name: Deploy PRO tenant üöÄ

on:
  workflow_dispatch:
  push:
    branches:
        main
env:
  CLIENT: 'deprisa'
  ENVIROMENT: 'qa'

permissions:
  id-token: write
  contents: read

jobs:
  # üåê 1. Desplegar Infraestructura
  deploy-infra:
    name: Deploy Azure Infraestructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Infra Repo
        uses: actions/checkout@v4

      - name: Azure Login üîê
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_PRO }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_PRO }}

      - name: Deploy Infrastructure üöÄ
        uses: azure/bicep-deploy@v2
        with:
          type: deployment
          operation: create
          name: PRO2-Deployment
          location: eastus
          scope: subscription
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_PRO }}
          template-file: ./infra/main.bicep
          parameters-file: ./infra/main.parameters.json

  build-test:
    name: Build and Test WebApp
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          repository: carlosgazabond/ToDoFront # Cambia a tu repositorio de tests

      - name: Install Dependencies üõ†Ô∏è
        run: npm install

      - name: Test
        run: npm test
      
      - name: Build
        run: npm run build

  build-and-push-acr:
    name: Build and Push to ACR
    needs: [deploy-infra, build-test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login üîê
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_PRO }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_PRO }}

      - name: Get ACR Credentials üîë
        id: acr-creds
        run: |
          ACR_NAME="acr${CLIENT}${ENVIROMENT}"
          echo "ACR_NAME=$ACR_NAME"

          CREDS=$(az acr credential show --name $ACR_NAME --query "{username:username,password:passwords[0].value}" -o json)
          echo "ACR_USERNAME=$(echo $CREDS | jq -r .username)" >> $GITHUB_OUTPUT
          echo "ACR_PASSWORD=$(echo $CREDS | jq -r .password)" >> $GITHUB_OUTPUT
          echo "ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --query loginServer -o tsv)" >> $GITHUB_OUTPUT

      - name: Docker Login üê≥
        run: |
          echo "${{ steps.acr-creds.outputs.ACR_PASSWORD }}" | docker login ${{ steps.acr-creds.outputs.ACR_LOGIN_SERVER }} \
            -u ${{ steps.acr-creds.outputs.ACR_USERNAME }} --password-stdin

      - name: Build and Push Docker Image üö¢
        run: |
          IMAGE_NAME="${{ steps.acr-creds.outputs.ACR_LOGIN_SERVER }}/todo-front:${{ github.sha }}"
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME
